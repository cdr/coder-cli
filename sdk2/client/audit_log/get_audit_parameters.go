// Code generated by go-swagger; DO NOT EDIT.

package audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAuditParams creates a new GetAuditParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuditParams() *GetAuditParams {
	return &GetAuditParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuditParamsWithTimeout creates a new GetAuditParams object
// with the ability to set a timeout on a request.
func NewGetAuditParamsWithTimeout(timeout time.Duration) *GetAuditParams {
	return &GetAuditParams{
		timeout: timeout,
	}
}

// NewGetAuditParamsWithContext creates a new GetAuditParams object
// with the ability to set a context for a request.
func NewGetAuditParamsWithContext(ctx context.Context) *GetAuditParams {
	return &GetAuditParams{
		Context: ctx,
	}
}

// NewGetAuditParamsWithHTTPClient creates a new GetAuditParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuditParamsWithHTTPClient(client *http.Client) *GetAuditParams {
	return &GetAuditParams{
		HTTPClient: client,
	}
}

/* GetAuditParams contains all the parameters to send to the API endpoint
   for the get audit operation.

   Typically these are written to a http.Request.
*/
type GetAuditParams struct {

	/* Action.

	   Filter by action
	*/
	Action *string

	/* Email.

	   Filter by email
	*/
	Email *string

	/* Limit.

	   Number of audit logs to return. Defaults to 100.
	*/
	Limit *int64

	/* RangeEnd.

	   Get audit logs before time. Format is Unix seconds
	*/
	RangeEnd *int64

	/* RangeStart.

	   Get audit logs after time. Format is Unix seconds
	*/
	RangeStart *int64

	/* ResourceID.

	   Filter by resource ID
	*/
	ResourceID *string

	/* ResourceTarget.

	   Filter by resource_target
	*/
	ResourceTarget *string

	/* ResourceType.

	   Filter by resource type
	*/
	ResourceType *string

	/* Skip.

	   Number of audit logs to skip
	*/
	Skip *int64

	/* UserID.

	   Filter by user_id
	*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get audit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditParams) WithDefaults() *GetAuditParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get audit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get audit params
func (o *GetAuditParams) WithTimeout(timeout time.Duration) *GetAuditParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get audit params
func (o *GetAuditParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get audit params
func (o *GetAuditParams) WithContext(ctx context.Context) *GetAuditParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get audit params
func (o *GetAuditParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get audit params
func (o *GetAuditParams) WithHTTPClient(client *http.Client) *GetAuditParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get audit params
func (o *GetAuditParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the get audit params
func (o *GetAuditParams) WithAction(action *string) *GetAuditParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the get audit params
func (o *GetAuditParams) SetAction(action *string) {
	o.Action = action
}

// WithEmail adds the email to the get audit params
func (o *GetAuditParams) WithEmail(email *string) *GetAuditParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the get audit params
func (o *GetAuditParams) SetEmail(email *string) {
	o.Email = email
}

// WithLimit adds the limit to the get audit params
func (o *GetAuditParams) WithLimit(limit *int64) *GetAuditParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get audit params
func (o *GetAuditParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithRangeEnd adds the rangeEnd to the get audit params
func (o *GetAuditParams) WithRangeEnd(rangeEnd *int64) *GetAuditParams {
	o.SetRangeEnd(rangeEnd)
	return o
}

// SetRangeEnd adds the rangeEnd to the get audit params
func (o *GetAuditParams) SetRangeEnd(rangeEnd *int64) {
	o.RangeEnd = rangeEnd
}

// WithRangeStart adds the rangeStart to the get audit params
func (o *GetAuditParams) WithRangeStart(rangeStart *int64) *GetAuditParams {
	o.SetRangeStart(rangeStart)
	return o
}

// SetRangeStart adds the rangeStart to the get audit params
func (o *GetAuditParams) SetRangeStart(rangeStart *int64) {
	o.RangeStart = rangeStart
}

// WithResourceID adds the resourceID to the get audit params
func (o *GetAuditParams) WithResourceID(resourceID *string) *GetAuditParams {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the get audit params
func (o *GetAuditParams) SetResourceID(resourceID *string) {
	o.ResourceID = resourceID
}

// WithResourceTarget adds the resourceTarget to the get audit params
func (o *GetAuditParams) WithResourceTarget(resourceTarget *string) *GetAuditParams {
	o.SetResourceTarget(resourceTarget)
	return o
}

// SetResourceTarget adds the resourceTarget to the get audit params
func (o *GetAuditParams) SetResourceTarget(resourceTarget *string) {
	o.ResourceTarget = resourceTarget
}

// WithResourceType adds the resourceType to the get audit params
func (o *GetAuditParams) WithResourceType(resourceType *string) *GetAuditParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get audit params
func (o *GetAuditParams) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WithSkip adds the skip to the get audit params
func (o *GetAuditParams) WithSkip(skip *int64) *GetAuditParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get audit params
func (o *GetAuditParams) SetSkip(skip *int64) {
	o.Skip = skip
}

// WithUserID adds the userID to the get audit params
func (o *GetAuditParams) WithUserID(userID *string) *GetAuditParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get audit params
func (o *GetAuditParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuditParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action != nil {

		// query param action
		var qrAction string

		if o.Action != nil {
			qrAction = *o.Action
		}
		qAction := qrAction
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.RangeEnd != nil {

		// query param range_end
		var qrRangeEnd int64

		if o.RangeEnd != nil {
			qrRangeEnd = *o.RangeEnd
		}
		qRangeEnd := swag.FormatInt64(qrRangeEnd)
		if qRangeEnd != "" {

			if err := r.SetQueryParam("range_end", qRangeEnd); err != nil {
				return err
			}
		}
	}

	if o.RangeStart != nil {

		// query param range_start
		var qrRangeStart int64

		if o.RangeStart != nil {
			qrRangeStart = *o.RangeStart
		}
		qRangeStart := swag.FormatInt64(qrRangeStart)
		if qRangeStart != "" {

			if err := r.SetQueryParam("range_start", qRangeStart); err != nil {
				return err
			}
		}
	}

	if o.ResourceID != nil {

		// query param resource_id
		var qrResourceID string

		if o.ResourceID != nil {
			qrResourceID = *o.ResourceID
		}
		qResourceID := qrResourceID
		if qResourceID != "" {

			if err := r.SetQueryParam("resource_id", qResourceID); err != nil {
				return err
			}
		}
	}

	if o.ResourceTarget != nil {

		// query param resource_target
		var qrResourceTarget string

		if o.ResourceTarget != nil {
			qrResourceTarget = *o.ResourceTarget
		}
		qResourceTarget := qrResourceTarget
		if qResourceTarget != "" {

			if err := r.SetQueryParam("resource_target", qResourceTarget); err != nil {
				return err
			}
		}
	}

	if o.ResourceType != nil {

		// query param resource_type
		var qrResourceType string

		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {

			if err := r.SetQueryParam("resource_type", qResourceType); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int64

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt64(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
