// Code generated by go-swagger; DO NOT EDIT.

package registries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new registries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for registries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRegistry(params *CreateRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRegistryCreated, error)

	DeleteRegistry(params *DeleteRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRegistryOK, error)

	GetRegistry(params *GetRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegistryOK, error)

	ListOrgRegistries(params *ListOrgRegistriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrgRegistriesOK, error)

	UpdateRegistry(params *UpdateRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRegistryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRegistry imports a docker registry
*/
func (a *Client) CreateRegistry(params *CreateRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRegistryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-registry",
		Method:             "POST",
		PathPattern:        "/v0/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRegistryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-registry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRegistry deletes a docker registry
*/
func (a *Client) DeleteRegistry(params *DeleteRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-registry",
		Method:             "DELETE",
		PathPattern:        "/v0/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-registry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRegistry gets metadata for a docker registry
*/
func (a *Client) GetRegistry(params *GetRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-registry",
		Method:             "GET",
		PathPattern:        "/v0/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-registry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListOrgRegistries lists organization registries
*/
func (a *Client) ListOrgRegistries(params *ListOrgRegistriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrgRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrgRegistriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list-org-registries",
		Method:             "GET",
		PathPattern:        "/v0/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListOrgRegistriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOrgRegistriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list-org-registries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRegistry updates a docker registry
*/
func (a *Client) UpdateRegistry(params *UpdateRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-registry",
		Method:             "PATCH",
		PathPattern:        "/v0/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-registry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
