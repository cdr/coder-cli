// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetEnvironmentsParams creates a new GetEnvironmentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEnvironmentsParams() *GetEnvironmentsParams {
	return &GetEnvironmentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEnvironmentsParamsWithTimeout creates a new GetEnvironmentsParams object
// with the ability to set a timeout on a request.
func NewGetEnvironmentsParamsWithTimeout(timeout time.Duration) *GetEnvironmentsParams {
	return &GetEnvironmentsParams{
		timeout: timeout,
	}
}

// NewGetEnvironmentsParamsWithContext creates a new GetEnvironmentsParams object
// with the ability to set a context for a request.
func NewGetEnvironmentsParamsWithContext(ctx context.Context) *GetEnvironmentsParams {
	return &GetEnvironmentsParams{
		Context: ctx,
	}
}

// NewGetEnvironmentsParamsWithHTTPClient creates a new GetEnvironmentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEnvironmentsParamsWithHTTPClient(client *http.Client) *GetEnvironmentsParams {
	return &GetEnvironmentsParams{
		HTTPClient: client,
	}
}

/* GetEnvironmentsParams contains all the parameters to send to the API endpoint
   for the get environments operation.

   Typically these are written to a http.Request.
*/
type GetEnvironmentsParams struct {

	/* After.

	   Get environments after id. Cannot set both 'after' and 'before'
	*/
	After *string

	/* Before.

	   Get environments before id. Cannot set both 'before' and 'after'
	*/
	Before *string

	/* Images.

	   List environments using the provided image ids.
	*/
	Images *string

	/* Limit.

	   Max number of environments to return
	*/
	Limit *int64

	/* Orgs.

	   List environments from the provided org ids.
	*/
	Orgs *string

	/* Tags.

	   List environments using the provided tags.
	*/
	Tags *string

	/* Users.

	   List environments owned by the provided user ids.
	*/
	Users *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get environments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEnvironmentsParams) WithDefaults() *GetEnvironmentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get environments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEnvironmentsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get environments params
func (o *GetEnvironmentsParams) WithTimeout(timeout time.Duration) *GetEnvironmentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get environments params
func (o *GetEnvironmentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get environments params
func (o *GetEnvironmentsParams) WithContext(ctx context.Context) *GetEnvironmentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get environments params
func (o *GetEnvironmentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get environments params
func (o *GetEnvironmentsParams) WithHTTPClient(client *http.Client) *GetEnvironmentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get environments params
func (o *GetEnvironmentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get environments params
func (o *GetEnvironmentsParams) WithAfter(after *string) *GetEnvironmentsParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get environments params
func (o *GetEnvironmentsParams) SetAfter(after *string) {
	o.After = after
}

// WithBefore adds the before to the get environments params
func (o *GetEnvironmentsParams) WithBefore(before *string) *GetEnvironmentsParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get environments params
func (o *GetEnvironmentsParams) SetBefore(before *string) {
	o.Before = before
}

// WithImages adds the images to the get environments params
func (o *GetEnvironmentsParams) WithImages(images *string) *GetEnvironmentsParams {
	o.SetImages(images)
	return o
}

// SetImages adds the images to the get environments params
func (o *GetEnvironmentsParams) SetImages(images *string) {
	o.Images = images
}

// WithLimit adds the limit to the get environments params
func (o *GetEnvironmentsParams) WithLimit(limit *int64) *GetEnvironmentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get environments params
func (o *GetEnvironmentsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOrgs adds the orgs to the get environments params
func (o *GetEnvironmentsParams) WithOrgs(orgs *string) *GetEnvironmentsParams {
	o.SetOrgs(orgs)
	return o
}

// SetOrgs adds the orgs to the get environments params
func (o *GetEnvironmentsParams) SetOrgs(orgs *string) {
	o.Orgs = orgs
}

// WithTags adds the tags to the get environments params
func (o *GetEnvironmentsParams) WithTags(tags *string) *GetEnvironmentsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get environments params
func (o *GetEnvironmentsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithUsers adds the users to the get environments params
func (o *GetEnvironmentsParams) WithUsers(users *string) *GetEnvironmentsParams {
	o.SetUsers(users)
	return o
}

// SetUsers adds the users to the get environments params
func (o *GetEnvironmentsParams) SetUsers(users *string) {
	o.Users = users
}

// WriteToRequest writes these params to a swagger request
func (o *GetEnvironmentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore string

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	if o.Images != nil {

		// query param images
		var qrImages string

		if o.Images != nil {
			qrImages = *o.Images
		}
		qImages := qrImages
		if qImages != "" {

			if err := r.SetQueryParam("images", qImages); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Orgs != nil {

		// query param orgs
		var qrOrgs string

		if o.Orgs != nil {
			qrOrgs = *o.Orgs
		}
		qOrgs := qrOrgs
		if qOrgs != "" {

			if err := r.SetQueryParam("orgs", qOrgs); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// query param tags
		var qrTags string

		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {

			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}
	}

	if o.Users != nil {

		// query param users
		var qrUsers string

		if o.Users != nil {
			qrUsers = *o.Users
		}
		qUsers := qrUsers
		if qUsers != "" {

			if err := r.SetQueryParam("users", qUsers); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
