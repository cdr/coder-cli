// Code generated by go-swagger; DO NOT EDIT.

package dev_u_r_ls

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dev u r ls API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dev u r ls API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEnvironmentDevurl(params *CreateEnvironmentDevurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEnvironmentDevurlOK, error)

	DeleteEnvironmentDevurl(params *DeleteEnvironmentDevurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEnvironmentDevurlOK, error)

	GetEnvironmentDevurlStatus(params *GetEnvironmentDevurlStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnvironmentDevurlStatusOK, error)

	GetEnvironmentDevurls(params *GetEnvironmentDevurlsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnvironmentDevurlsOK, error)

	ListEnvironmentDevurlStatus(params *ListEnvironmentDevurlStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEnvironmentDevurlStatusOK, error)

	UpdateEnvironmentDevurl(params *UpdateEnvironmentDevurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEnvironmentDevurlOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEnvironmentDevurl creates environment dev URL
*/
func (a *Client) CreateEnvironmentDevurl(params *CreateEnvironmentDevurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEnvironmentDevurlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEnvironmentDevurlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-environment-devurl",
		Method:             "POST",
		PathPattern:        "/v0/environments/{id}/devurls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEnvironmentDevurlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEnvironmentDevurlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-environment-devurl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEnvironmentDevurl deletes environment dev URL
*/
func (a *Client) DeleteEnvironmentDevurl(params *DeleteEnvironmentDevurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEnvironmentDevurlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnvironmentDevurlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-environment-devurl",
		Method:             "DELETE",
		PathPattern:        "/v0/environments/{id}/devurls/{devurl}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEnvironmentDevurlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnvironmentDevurlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-environment-devurl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentDevurlStatus gets environment dev URL status
*/
func (a *Client) GetEnvironmentDevurlStatus(params *GetEnvironmentDevurlStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnvironmentDevurlStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentDevurlStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-environment-devurl-status",
		Method:             "GET",
		PathPattern:        "/v0/environments/{id}/devurls/{devurl}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentDevurlStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentDevurlStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-environment-devurl-status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentDevurls lists environment dev u r ls
*/
func (a *Client) GetEnvironmentDevurls(params *GetEnvironmentDevurlsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnvironmentDevurlsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentDevurlsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-environment-devurls",
		Method:             "GET",
		PathPattern:        "/v0/environments/{id}/devurls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentDevurlsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentDevurlsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-environment-devurls: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEnvironmentDevurlStatus lists environment dev URL statuses
*/
func (a *Client) ListEnvironmentDevurlStatus(params *ListEnvironmentDevurlStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEnvironmentDevurlStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEnvironmentDevurlStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list-environment-devurl-status",
		Method:             "GET",
		PathPattern:        "/v0/environments/{id}/devurls/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEnvironmentDevurlStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEnvironmentDevurlStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list-environment-devurl-status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEnvironmentDevurl updates environment dev URL
*/
func (a *Client) UpdateEnvironmentDevurl(params *UpdateEnvironmentDevurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEnvironmentDevurlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnvironmentDevurlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-environment-devurl",
		Method:             "PUT",
		PathPattern:        "/v0/environments/{id}/devurls/{devurl}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEnvironmentDevurlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEnvironmentDevurlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-environment-devurl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
