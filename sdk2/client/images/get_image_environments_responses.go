// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"cdr.dev/coder-cli/sdk2/models"
)

// GetImageEnvironmentsReader is a Reader for the GetImageEnvironments structure.
type GetImageEnvironmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetImageEnvironmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetImageEnvironmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetImageEnvironmentsOK creates a GetImageEnvironmentsOK with default headers values
func NewGetImageEnvironmentsOK() *GetImageEnvironmentsOK {
	return &GetImageEnvironmentsOK{}
}

/* GetImageEnvironmentsOK describes a response with status code 200, with default header values.

OK
*/
type GetImageEnvironmentsOK struct {
	Payload *GetImageEnvironmentsOKBody
}

func (o *GetImageEnvironmentsOK) Error() string {
	return fmt.Sprintf("[GET /v0/images/{id}/environments][%d] getImageEnvironmentsOK  %+v", 200, o.Payload)
}
func (o *GetImageEnvironmentsOK) GetPayload() *GetImageEnvironmentsOKBody {
	return o.Payload
}

func (o *GetImageEnvironmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetImageEnvironmentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetImageEnvironmentsOKBody get image environments o k body
swagger:model GetImageEnvironmentsOKBody
*/
type GetImageEnvironmentsOKBody struct {
	models.PagedResponse

	// data
	Data []*models.Environment `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetImageEnvironmentsOKBody) UnmarshalJSON(raw []byte) error {
	// GetImageEnvironmentsOKBodyAO0
	var getImageEnvironmentsOKBodyAO0 models.PagedResponse
	if err := swag.ReadJSON(raw, &getImageEnvironmentsOKBodyAO0); err != nil {
		return err
	}
	o.PagedResponse = getImageEnvironmentsOKBodyAO0

	// GetImageEnvironmentsOKBodyAO1
	var dataGetImageEnvironmentsOKBodyAO1 struct {
		Data []*models.Environment `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetImageEnvironmentsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetImageEnvironmentsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetImageEnvironmentsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getImageEnvironmentsOKBodyAO0, err := swag.WriteJSON(o.PagedResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getImageEnvironmentsOKBodyAO0)
	var dataGetImageEnvironmentsOKBodyAO1 struct {
		Data []*models.Environment `json:"data"`
	}

	dataGetImageEnvironmentsOKBodyAO1.Data = o.Data

	jsonDataGetImageEnvironmentsOKBodyAO1, errGetImageEnvironmentsOKBodyAO1 := swag.WriteJSON(dataGetImageEnvironmentsOKBodyAO1)
	if errGetImageEnvironmentsOKBodyAO1 != nil {
		return nil, errGetImageEnvironmentsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetImageEnvironmentsOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get image environments o k body
func (o *GetImageEnvironmentsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.PagedResponse
	if err := o.PagedResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetImageEnvironmentsOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getImageEnvironmentsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get image environments o k body based on the context it is used
func (o *GetImageEnvironmentsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.PagedResponse
	if err := o.PagedResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetImageEnvironmentsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getImageEnvironmentsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetImageEnvironmentsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImageEnvironmentsOKBody) UnmarshalBinary(b []byte) error {
	var res GetImageEnvironmentsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
