// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new images API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for images API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageOK, error)

	DeleteImageTag(params *DeleteImageTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageTagOK, error)

	GetImage(params *GetImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageOK, error)

	GetImageEnvironments(params *GetImageEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageEnvironmentsOK, error)

	GetImageRegistryTags(params *GetImageRegistryTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageRegistryTagsOK, error)

	GetImageTag(params *GetImageTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageTagOK, error)

	GetImageTags(params *GetImageTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageTagsOK, error)

	ImportImageTag(params *ImportImageTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportImageTagOK, error)

	ImportOrgImage(params *ImportOrgImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportOrgImageCreated, error)

	ListAllOrgImages(params *ListAllOrgImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAllOrgImagesOK, error)

	PatchImage(params *PatchImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchImageOK, error)

	RefreshImageTag(params *RefreshImageTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshImageTagOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteImage deletes an image
*/
func (a *Client) DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-image",
		Method:             "DELETE",
		PathPattern:        "/v0/images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-image: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteImageTag deletes an image tag
*/
func (a *Client) DeleteImageTag(params *DeleteImageTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImageTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-image-tag",
		Method:             "DELETE",
		PathPattern:        "/v0/images/{id}/tags/{tag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteImageTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteImageTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-image-tag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImage gets image metadata
*/
func (a *Client) GetImage(params *GetImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-image",
		Method:             "GET",
		PathPattern:        "/v0/images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-image: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImageEnvironments gets environments using the provided image
*/
func (a *Client) GetImageEnvironments(params *GetImageEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageEnvironmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-image-environments",
		Method:             "GET",
		PathPattern:        "/v0/images/{id}/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageEnvironmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-image-environments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImageRegistryTags gets imported tags for an image
*/
func (a *Client) GetImageRegistryTags(params *GetImageRegistryTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageRegistryTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageRegistryTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-image-registry-tags",
		Method:             "GET",
		PathPattern:        "/v0/images/{id}/registry-tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageRegistryTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageRegistryTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-image-registry-tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImageTag gets metadata for an image tag
*/
func (a *Client) GetImageTag(params *GetImageTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-image-tag",
		Method:             "GET",
		PathPattern:        "/v0/images/{id}/{tag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-image-tag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImageTags gets all image tags for an image
*/
func (a *Client) GetImageTags(params *GetImageTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-image-tags",
		Method:             "GET",
		PathPattern:        "/v0/images/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-image-tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportImageTag imports image tag
*/
func (a *Client) ImportImageTag(params *ImportImageTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportImageTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportImageTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "import-image-tag",
		Method:             "POST",
		PathPattern:        "/v0/images/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportImageTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportImageTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for import-image-tag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportOrgImage imports a docker image
*/
func (a *Client) ImportOrgImage(params *ImportOrgImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportOrgImageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportOrgImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "import-org-image",
		Method:             "POST",
		PathPattern:        "/v0/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportOrgImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportOrgImageCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for import-org-image: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllOrgImages lists all organization images
*/
func (a *Client) ListAllOrgImages(params *ListAllOrgImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAllOrgImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllOrgImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list-all-org-images",
		Method:             "GET",
		PathPattern:        "/v0/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllOrgImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllOrgImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list-all-org-images: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchImage updates an image
*/
func (a *Client) PatchImage(params *PatchImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patch-image",
		Method:             "PATCH",
		PathPattern:        "/v0/images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch-image: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RefreshImageTag updates image tags for an image

  Update imported image tags for an image to their latest hash.
Updating the tags occurs in the background.
*/
func (a *Client) RefreshImageTag(params *RefreshImageTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshImageTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshImageTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refresh-image-tag",
		Method:             "POST",
		PathPattern:        "/v0/images/{id}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshImageTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshImageTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refresh-image-tag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
