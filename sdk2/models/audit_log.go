// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditLog audit log
//
// swagger:model AuditLog
type AuditLog struct {

	// action
	Action string `json:"action,omitempty"`

	// diff
	Diff string `json:"diff,omitempty"`

	// resource
	Resource string `json:"resource,omitempty"`

	// resource id
	ResourceID string `json:"resource_id,omitempty"`

	// resource target
	ResourceTarget string `json:"resource_target,omitempty"`

	// resource type
	ResourceType string `json:"resource_type,omitempty"`

	// status code
	StatusCode int64 `json:"status_code,omitempty"`

	// time
	Time string `json:"time,omitempty"`

	// user
	User *RestrictedUser `json:"user,omitempty"`

	// user agent
	UserAgent *UserAgent `json:"user_agent,omitempty"`

	// user agent raw
	UserAgentRaw string `json:"user_agent_raw,omitempty"`
}

// Validate validates this audit log
func (m *AuditLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAgent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditLog) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *AuditLog) validateUserAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAgent) { // not required
		return nil
	}

	if m.UserAgent != nil {
		if err := m.UserAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_agent")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this audit log based on the context it is used
func (m *AuditLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditLog) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *AuditLog) contextValidateUserAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.UserAgent != nil {
		if err := m.UserAgent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_agent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditLog) UnmarshalBinary(b []byte) error {
	var res AuditLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
