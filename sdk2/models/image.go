// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Image image
//
// swagger:model Image
type Image struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// default cpu cores
	DefaultCPUCores float64 `json:"default_cpu_cores,omitempty"`

	// default disk gb
	DefaultDiskGb int64 `json:"default_disk_gb,omitempty"`

	// default memory gb
	DefaultMemoryGb float64 `json:"default_memory_gb,omitempty"`

	// default tag
	DefaultTag *ImageTag `json:"default_tag,omitempty"`

	// deprecated
	Deprecated bool `json:"deprecated,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Optional fields, must set ImageOptions for these to be returned.
	Environments []*Environment `json:"environments"`

	// id
	ID string `json:"id,omitempty"`

	// organization id
	OrganizationID string `json:"organization_id,omitempty"`

	// registry
	Registry *Registry `json:"registry,omitempty"`

	// repository
	Repository string `json:"repository,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// user-supplied URL for image
	URL string `json:"url,omitempty"`

	// user ids
	UserIds []string `json:"user_ids"`
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Image) validateDefaultTag(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultTag) { // not required
		return nil
	}

	if m.DefaultTag != nil {
		if err := m.DefaultTag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_tag")
			}
			return err
		}
	}

	return nil
}

func (m *Image) validateEnvironments(formats strfmt.Registry) error {
	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Image) validateRegistry(formats strfmt.Registry) error {
	if swag.IsZero(m.Registry) { // not required
		return nil
	}

	if m.Registry != nil {
		if err := m.Registry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this image based on the context it is used
func (m *Image) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Image) contextValidateDefaultTag(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultTag != nil {
		if err := m.DefaultTag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_tag")
			}
			return err
		}
	}

	return nil
}

func (m *Image) contextValidateEnvironments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Environments); i++ {

		if m.Environments[i] != nil {
			if err := m.Environments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Image) contextValidateRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.Registry != nil {
		if err := m.Registry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
