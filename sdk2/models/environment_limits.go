// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnvironmentLimits environment limits
//
// swagger:model EnvironmentLimits
type EnvironmentLimits struct {

	// gpus enabled
	GpusEnabled bool `json:"gpus_enabled,omitempty"`

	// max disk gb
	MaxDiskGb int64 `json:"max_disk_gb,omitempty"`

	// max envs
	MaxEnvs int64 `json:"max_envs,omitempty"`

	// max gpus
	MaxGpus int64 `json:"max_gpus,omitempty"`

	// max mem gb
	MaxMemGb float64 `json:"max_mem_gb,omitempty"`

	// min cpu cores
	MinCPUCores float64 `json:"min_cpu_cores,omitempty"`

	// min disk gb
	MinDiskGb int64 `json:"min_disk_gb,omitempty"`

	// MinGPUs will always be 0, MaxGPUs changes depending on
	// whether GPUs are enabled and available.
	MinGpus int64 `json:"min_gpus,omitempty"`

	// min mem gb
	MinMemGb float64 `json:"min_mem_gb,omitempty"`

	// Nodes is a list of all available nodes and the available resources on
	// each. Any created environments will be checked to see if it fits in
	// at least one of these nodes before it is created.
	Nodes []*AvailableResources `json:"nodes"`
}

// Validate validates this environment limits
func (m *EnvironmentLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentLimits) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this environment limits based on the context it is used
func (m *EnvironmentLimits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentLimits) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentLimits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentLimits) UnmarshalBinary(b []byte) error {
	var res EnvironmentLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
