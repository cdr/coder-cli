// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ImageTag image tag
//
// swagger:model ImageTag
type ImageTag struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// environments
	Environments []*Environment `json:"environments"`

	// hash last updated at
	HashLastUpdatedAt string `json:"hash_last_updated_at,omitempty"`

	// image id
	ImageID string `json:"image_id,omitempty"`

	// latest hash
	LatestHash string `json:"latest_hash,omitempty"`

	// os release
	OsRelease *Release `json:"os_release,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this image tag
func (m *ImageTag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsRelease(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageTag) validateEnvironments(formats strfmt.Registry) error {
	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImageTag) validateOsRelease(formats strfmt.Registry) error {
	if swag.IsZero(m.OsRelease) { // not required
		return nil
	}

	if m.OsRelease != nil {
		if err := m.OsRelease.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os_release")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this image tag based on the context it is used
func (m *ImageTag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnvironments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsRelease(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageTag) contextValidateEnvironments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Environments); i++ {

		if m.Environments[i] != nil {
			if err := m.Environments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImageTag) contextValidateOsRelease(ctx context.Context, formats strfmt.Registry) error {

	if m.OsRelease != nil {
		if err := m.OsRelease.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os_release")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageTag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageTag) UnmarshalBinary(b []byte) error {
	var res ImageTag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
