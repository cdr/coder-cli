// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ImportImageRequest import image request
//
// swagger:model ImportImageRequest
type ImportImageRequest struct {

	// default cpu cores
	DefaultCPUCores float64 `json:"default_cpu_cores,omitempty"`

	// default disk gb
	DefaultDiskGb int64 `json:"default_disk_gb,omitempty"`

	// default memory gb
	DefaultMemoryGb float64 `json:"default_memory_gb,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// NewRegistry is used when adding a new registry.
	NewRegistry *NewRegistryRequest `json:"new_registry,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// RegistryID is used to import images to existing registries.
	RegistryID string `json:"registry_id,omitempty"`

	// Repository refers to the image. For example: "codercom/ubuntu".
	Repository string `json:"repository,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this import image request
func (m *ImportImageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewRegistry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportImageRequest) validateNewRegistry(formats strfmt.Registry) error {
	if swag.IsZero(m.NewRegistry) { // not required
		return nil
	}

	if m.NewRegistry != nil {
		if err := m.NewRegistry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_registry")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this import image request based on the context it is used
func (m *ImportImageRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportImageRequest) contextValidateNewRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.NewRegistry != nil {
		if err := m.NewRegistry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_registry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportImageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportImageRequest) UnmarshalBinary(b []byte) error {
	var res ImportImageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
