// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourcePool resource pool
//
// swagger:model ResourcePool
type ResourcePool struct {

	// cluster address
	ClusterAddress string `json:"cluster_address,omitempty"`

	// cluster domain suffix
	ClusterDomainSuffix string `json:"cluster_domain_suffix,omitempty"`

	// default namespace
	DefaultNamespace string `json:"default_namespace,omitempty"`

	// devurl host
	DevurlHost string `json:"devurl_host,omitempty"`

	// envproxy access url
	// Required: true
	EnvproxyAccessURL *string `json:"envproxy_access_url"`

	// id
	ID string `json:"id,omitempty"`

	// local
	Local bool `json:"local,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace whitelist
	NamespaceWhitelist []string `json:"namespace_whitelist"`

	// org whitelist
	OrgWhitelist []string `json:"org_whitelist"`

	// ssh enabled
	SSHEnabled bool `json:"ssh_enabled,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// storage class
	StorageClass string `json:"storage_class,omitempty"`
}

// Validate validates this resource pool
func (m *ResourcePool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvproxyAccessURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcePool) validateEnvproxyAccessURL(formats strfmt.Registry) error {

	if err := validate.Required("envproxy_access_url", "body", m.EnvproxyAccessURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource pool based on context it is used
func (m *ResourcePool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourcePool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcePool) UnmarshalBinary(b []byte) error {
	var res ResourcePool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
